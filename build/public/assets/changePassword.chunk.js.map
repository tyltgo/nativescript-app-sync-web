{"version":3,"file":"changePassword.chunk.js","sources":["webpack:///src/components/ChangePassword/ChangePassword.js","webpack:///src/containers/ChangePasswordContainer.js"],"sourcesContent":["\nimport React, { PropTypes, Component } from 'react';\nimport {\n  Col,\n  ControlLabel,\n  Form,\n  FormGroup,\n  FormControl,\n  Checkbox,\n  Button,\n  Panel,\n} from 'react-bootstrap';\n\nimport _ from 'lodash';\n\nclass ChangePassword extends Component {\n  static propTypes = {\n    isFetching: PropTypes.bool,\n    oldPassword: PropTypes.string,\n    oldPasswordInputChange: PropTypes.func,\n    newPassword: PropTypes.string,\n    newPasswordInputChange: PropTypes.func,\n    newPasswordConfirm: PropTypes.string,\n    newPasswordConfirmInputChange: PropTypes.func,\n    submit: PropTypes.func,\n    error: PropTypes.object,\n  };\n\n  static defaultProps = {\n    isFetching: false,\n    oldPassword: '',\n    oldPasswordInputChange: (oldPassword)=>{},\n    newPassword: '',\n    newPasswordInputChange: (newPassword)=>{},\n    newPasswordConfirm: '',\n    newPasswordConfirmInputChange: (newPasswordConfirm)=>{},\n    submit: ()=>{},\n    error: {},\n  };\n\n  constructor(){\n    super();\n    this.state = {field1: false, field2: false, field3: false};\n    this.setOldPassword = this.setOldPassword.bind(this);\n    this.setNewPassword = this.setNewPassword.bind(this);\n    this.setNewPasswordConfirm = this.setNewPasswordConfirm.bind(this);\n  }\n\n  setOldPassword(event) {\n    this.props.oldPasswordInputChange(event.target.value);\n  }\n\n  setNewPassword(event) {\n    this.props.newPasswordInputChange(event.target.value);\n  }\n\n  setNewPasswordConfirm(event) {\n    this.props.newPasswordConfirmInputChange(event.target.value);\n  }\n\n  render() {\n    const self = this;\n    let isValidate = true;\n    let oldPasswordTips = '';\n    if (!this.props.oldPassword) {\n      isValidate = false;\n      oldPasswordTips = 'Old password';\n    }\n    let newPasswordTips = '';\n    let newPasswordConfirmTips = '';\n    if (this.props.newPassword.length < 6) {\n      newPasswordTips = 'Please enter 6 to 22 characters';\n    }\n    if (!_.eq(this.props.newPassword, this.props.newPasswordConfirm)) {\n      isValidate = false;\n      newPasswordConfirmTips = 'These passwords do not match';\n    }\n    var disabled = true;\n    if (!this.props.isFetching && isValidate) {\n      disabled = false;\n    }\n    return (\n      <div style={{height:650, paddingLeft: 20, paddingRight:20 }}>\n        <Panel header=\"Change password\" style={{ maxWidth:350, marginLeft:\"auto\", marginRight: \"auto\" }}>\n          <Form>\n            <FormGroup>\n              <ControlLabel>Old password</ControlLabel>\n              <FormControl\n                onChange={this.setOldPassword}\n                type=\"password\"\n                value={this.props.oldPassword}\n                placeholder=\"Old password\"\n                onBlur={()=>this.setState({field1: true})}\n                autoFocus\n                />\n            </FormGroup>\n            <FormGroup>\n              <div style={{ color:'red' }} >\n              {\n                this.state.field1 ?\n                oldPasswordTips\n                : null\n              }\n              </div>\n            </FormGroup>\n            <FormGroup>\n              <ControlLabel>New password</ControlLabel>\n              <FormControl\n                onChange={this.setNewPassword}\n                type=\"password\"\n                value={this.props.newPassword}\n                placeholder=\"New password\"\n                onBlur={()=>this.setState({field2: true})}\n              />\n            </FormGroup>\n            <FormGroup>\n              <div style={{ color:'red' }} >\n              {\n                this.state.field2 ?\n                newPasswordTips\n                : null\n              }\n              </div>\n            </FormGroup>\n             <FormGroup>\n              <ControlLabel>Confirm new password</ControlLabel>\n              <FormControl\n                onChange={this.setNewPasswordConfirm}\n                type=\"password\"\n                value={this.props.newPasswordConfirm}\n                placeholder=\"Repeat the new password\"\n                onBlur={()=>this.setState({field3: true})}\n              />\n            </FormGroup>\n            <FormGroup>\n              <div style={{ color:'red' }} >\n              {\n                this.state.field3 ?\n                newPasswordConfirmTips\n                : null\n              }\n              </div>\n            </FormGroup>\n            <FormGroup style={{ paddingTop: 20 }}>\n              <div style={{ color:'red' }} >\n              {_.get(this.props, 'error.message')}\n              </div>\n            </FormGroup>\n            <FormGroup>\n              <Button\n                style={{width: \"100%\"}}\n                bsStyle=\"primary\"\n                disabled={disabled}\n                onClick={()=>{\n                  if (disabled) {\n                    return;\n                  }\n                  self.props.submit();\n                }}\n              >\n              Confirm\n              </Button>\n            </FormGroup>\n          </Form>\n        </Panel>\n      </div>\n    );\n  }\n}\nexport default ChangePassword;\n\n\n\n// WEBPACK FOOTER //\n// src/components/ChangePassword/ChangePassword.js","import React, {PropTypes, Component} from 'react';\n\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport _ from 'lodash';\nimport * as usersActions from '../actions/usersActions';\nimport * as authActions from '../actions/authActions';\nimport * as routesActions from '../actions/routesActions';\nimport ChangePassword from '../components/ChangePassword';\n\nclass ChangePasswordContainer extends Component {\n  componentDidMount() {\n    if (!_.get(this.props, 'auth.isAuth')) {\n      let path = location.pathname;\n      if (!_.isEmpty(location.search)) {\n        path += `?${location.search}`\n      }\n      this.props.actions.setBackHistory(path);\n      this.props.actions.fetchAuth(true);\n    }\n  }\n\n  render() {\n    const {password, actions} = this.props;\n    let oldPassword = _.get(password, 'oldPassword');\n    let newPassword = _.get(password, 'newPassword');\n    return (\n      <ChangePassword\n        isFetching={_.get(password, 'isFetching')}\n        oldPassword={oldPassword}\n        oldPasswordInputChange={actions.passwordChangeOldInput}\n        newPassword={newPassword}\n        newPasswordInputChange={actions.passwordChangeNewInput}\n        newPasswordConfirm={_.get(password, 'newPasswordConfirm')}\n        newPasswordConfirmInputChange={actions.passwordChangeNewConfirmInput}\n        submit={()=>actions.modifyPassword(oldPassword, newPassword)}\n        error={_.get(password, 'error')}\n      />\n    );\n  }\n}\n\nfunction mapStateToProps(state, ownProps) {\n  return {password: _.get(state, 'password')};\n}\n\nfunction mapDispatchToProps(dispatch, ownProps) {\n  return {\n    actions: bindActionCreators(Object.assign({}, usersActions, authActions, routesActions), dispatch)\n  }\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(ChangePasswordContainer)\n\n\n\n// WEBPACK FOOTER //\n// src/containers/ChangePasswordContainer.js"],"mappings":";;;;;;;;;;;;;;;;;;;;;AACA;AACA;AACA;AAUA;AACA;AACA;;;AAyBA;AAAA;AACA;AADA;AACA;AACA;AACA;AACA;AACA;AALA;AAMA;AACA;;;AACA;AACA;AACA;;;AAEA;AACA;AACA;;;AAEA;AACA;AACA;;;AAEA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFA;AAWA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAFA;AADA;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFA;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAFA;AADA;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFA;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAFA;AADA;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AADA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAhEA;AADA;AADA;AAqFA;;;;AAxJA;AACA;AADA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AADA;AAcA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AACA;AA4IA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACzKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AATA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYA;;;;AA7BA;AACA;AA+BA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;;;;A","sourceRoot":""}